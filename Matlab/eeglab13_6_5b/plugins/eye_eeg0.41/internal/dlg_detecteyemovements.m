% dlg_detecteyemovements - pops dialogue to enter eye movement detection
%                parameter, called by pop_detecteyemovements()
%                for help, type >> help pop_detecteyemovements
%
% Copyright (C) 2009-2013 Olaf Dimigen & Ulrich Reinacher, HU Berlin
% olaf.dimigen@hu-berlin.de / ulrich.reinacher.1@hu-berlin.de

% This program is free software; you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation; either version 3 of the License, or
% (at your option) any later version.
%
% This program is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
%
% You should have received a copy of the GNU General Public License
% along with this program; if not, write to the Free Software
% Foundation, 51 Franklin Street, Boston, MA 02110-1301, USA

function [left_eye, right_eye, vfac, mindur, degperpix, smooth, globalthresh, clusterdist, clustermode, plotfig, writesac, writefix] = dlg_detecteyemovements(callingFcn,chanlocs,srate)

geometry = { 1 [2 0.8 0.5] [2 0.8 0.5] [2 0.8 0.5] [2 0.8 0.5] [2 0.8 0.5] 1 1 [2 0.8 0.5] [2 0.8 0.5] [2 0.8 0.5] [2 0.8 0.5] [2 0.8 0.5] [2 1.3] 1 1 [2 1.3] [2 1.3] [2 1.3] };

visangle = [];

%% callbacks
cb_calcVisAngle = ['visangle = dlg_calcvisangle(''',callingFcn,''');' ...
    'if ~isempty(visangle),' ...
    '   set(findobj(''parent'', gcbf, ''tag'', tagToUpdate), ''string'', [ visangle ]);' ...
    'end;' ...
    'clear tagToUpdate' ...
    ];

%% strings for pulldown menu (saccade clustering methods, see mergesacc())
clustermethods = {'1. keep all saccades'; '2. keep first saccade'; '3. keep largest saccade'; '4. combine into one saccade'};

%% main menu
uilist = {...
    {'Style', 'text', 'string', 'Specify channels with gaze position', 'fontweight', 'bold'},...
    {'Style', 'text', 'string', 'Left eye, horizontal (X):'},...
    {'Style', 'edit', 'string', '', 'tag', 'chan_LX', 'TooltipString','leave empty if this channels was not recorded' }, ...
    {'Style', 'pushbutton', 'string', '...', 'enable' fastif(isempty(chanlocs), 'off', 'on') 'callback' 'tmpchanlocs = EEG.chanlocs; [tmp tmpval] = pop_chansel({tmpchanlocs.labels}, ''withindex'', ''on'', ''selectionmode'',''single''); set(findobj(gcbf, ''tag'', ''chan_LX''), ''string'',tmp); clear tmp tmpchanlocs tmpval'},...
    ...
    {'Style', 'text', 'string', 'Left eye, vertical (Y):'},...
    {'Style', 'edit', 'string', '', 'tag', 'chan_LY', 'TooltipString','leave empty if this channels was not recorded' }, ...
    {'Style', 'pushbutton', 'string', '...', 'enable' fastif(isempty(chanlocs), 'off', 'on') 'callback' 'tmpchanlocs = EEG.chanlocs; [tmp tmpval] = pop_chansel({tmpchanlocs.labels}, ''withindex'', ''on'', ''selectionmode'',''single''); set(findobj(gcbf, ''tag'', ''chan_LY''), ''string'',tmp); clear tmp tmpchanlocs tmpval' },...
    ...
    {'Style', 'text', 'string', 'Right eye, horizontal (X):'},...
    {'Style', 'edit', 'string', '', 'tag', 'chan_RX', 'TooltipString','leave empty if this channels was not recorded' }, ...
    {'Style', 'pushbutton', 'string', '...', 'enable' fastif(isempty(chanlocs), 'off', 'on') 'callback' 'tmpchanlocs = EEG.chanlocs; [tmp tmpval] = pop_chansel({tmpchanlocs.labels}, ''withindex'', ''on'', ''selectionmode'',''single''); set(findobj(gcbf, ''tag'', ''chan_RX''), ''string'',tmp); clear tmp tmpchanlocs tmpval' },...
    ...
    {'Style', 'text', 'string', 'Right eye, vertical (Y):'},...
    {'Style', 'edit', 'string', '', 'tag', 'chan_RY', 'TooltipString','leave empty if this channels was not recorded' }, ...
    {'Style', 'pushbutton', 'string', '...', 'enable' fastif(isempty(chanlocs), 'off', 'on') 'callback' 'tmpchanlocs = EEG.chanlocs; [tmp tmpval] = pop_chansel({tmpchanlocs.labels}, ''withindex'', ''on'', ''selectionmode'',''single''); set(findobj(gcbf, ''tag'', ''chan_RY''), ''string'',tmp); clear tmp tmpchanlocs tmpval' },...
    ...
    {'Style', 'text', 'string', 'Degrees visual angle per pixel:'},...
    {'Style', 'edit', 'string', '', 'tag', 'dpp' },...
    {'Style', 'pushbutton', 'string', 'Calc.', 'callback', ['tagToUpdate = ''dpp'';' cb_calcVisAngle] },...
    {},...
    {'Style', 'text', 'string', 'Saccade detection parameters','fontweight', 'bold'},...
    ...
    {'Style', 'text', 'string', 'Velocity threshold multiplier:'},...
    {'Style', 'edit', 'string', '6', 'tag', 'vfac'},...
    {'Style','text', 'string', 'SD'},...
    ...
    {'Style', 'text', 'string', 'Minimum saccade duration:'},...
    {'Style', 'edit', 'string', '4' 'tag', 'mindur'},...
    {'Style', 'text', 'string', 'samples'},...
    ...
    {'Style', 'text', 'string', 'Smooth raw data to suppress noise?'},...
    {'Style', 'checkbox','value', 1, 'tag', 'smoothdata'},...
    {'Style', 'text', 'string', ''},...
    ...
    {'Style', 'text', 'string', 'Compute velocity thresholds globally (across epochs)?'},...
    {'Style', 'checkbox','value', 0, 'tag', 'globalthresh'},...
    {'Style', 'text', 'string', ''},...
    ...
    {'Style', 'text', 'string', 'For clusters of saccades separated by less than:'},...
    {'Style', 'edit','string', '50', 'tag', 'clusterdist_ms'},...
    {'Style', 'text', 'string', 'ms'},...
    ...
    {'Style', 'text', 'string', '...do the following:'},...
    {'Style', 'popupmenu', 'string',clustermethods,'tag','clustermode','value',1},...
    {},...
    {'Style', 'text', 'string', 'Add eye movements to EEG.event?','fontweight', 'bold'},...
    ...
    {'Style', 'text', 'string', 'Add saccades?'},...
    {'Style', 'checkbox','value', 0, 'string' '(uncheck to test settings first)','tag','writesac'},...
    ...
    {'Style', 'text', 'string', 'Add fixations?'},...
    {'Style', 'checkbox','value', 0, 'string' '(uncheck to test settings first)','tag','writefix'},...
    ...
    {'Style', 'text', 'string', 'Plot figure with eye movement properties?'},...
    {'Style', 'checkbox','value', 1,'tag','plotfig'},...
    };


%% make GUI
[results tmp tmp outstruct] = inputgui( 'geometry',geometry, ...
    'uilist',uilist,'helpcom', ['pophelp(''' callingFcn ''');'],...
    'title', ['Detect eye movements -- ', callingFcn]);

%% process user input (cancel)
if isempty(results)
    return
end

left_eye_x = eeg_decodechan(chanlocs,outstruct.chan_LX);
left_eye_y = eeg_decodechan(chanlocs,outstruct.chan_LY);
if  isempty(left_eye_x) || isempty(left_eye_y) || (length([left_eye_x left_eye_y]) ~= 2)
    % catches 'creative and challenging' user input
    left_eye = [];
else
    left_eye = [left_eye_x left_eye_y];
end

right_eye_x = eeg_decodechan(chanlocs,outstruct.chan_RX);
right_eye_y = eeg_decodechan(chanlocs,outstruct.chan_RY);
if  isempty(right_eye_x) || isempty(right_eye_y) || (length([right_eye_x right_eye_y]) ~= 2)
    % catches 'creative and challenging' user input
    right_eye = [];
else
    right_eye = [right_eye_x right_eye_y];
end

vfac         = str2num(outstruct.vfac);
mindur       = str2num(outstruct.mindur);
smooth       = outstruct.smoothdata;
globalthresh = outstruct.globalthresh;
clusterdist  = round(str2num(outstruct.clusterdist_ms)/(1000/srate));
clustermode  = outstruct.clustermode;
degperpix    = str2double(outstruct.dpp);
writesac     = outstruct.writesac;
writefix     = outstruct.writefix;
plotfig      = outstruct.plotfig;

end