withinvars=c("Time", "Hemifield"),
idvar=NULL) %>%
mutate(Time = as.numeric(as.character(Time)))
ggplot(plotdata_N2i, aes(x=Time, y=N2i, color=Hemifield,fill=Hemifield)) + geom_line(size=1.4) +
geom_ribbon(aes(ymin=N2i-se, ymax=N2i+se), alpha = 0.2, colour=NA) +
geom_hline(yintercept=0, alpha = 0.5) + geom_vline(xintercept=0, alpha = 0.5) +
coord_cartesian(xlim = c(-100, 500)) +
xlab("Time (ms)") + ylab("N2i (\u00b5V)") +
theme(axis.title.x = element_text(face="bold", size=12),
axis.text.x  = element_text(face="bold", angle=0,  size=12)) +
theme(axis.title.y = element_text(face="bold", size=12),
axis.text.y  = element_text(angle=0, vjust=0.5, size=12)) +
theme(legend.title = element_text(size=11, face="bold")) +
theme(legend.text = element_text(size = 11, face = "bold")) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) +
theme(panel.margin = unit(2, "lines")) +
facet_wrap(~ ID, scales="free_y")
View(data)
View(data)
####Which computer/directory is this being run on?
setwd(("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_R"))
### Install/load required packages
#List of R packages required for this analysis:
required_packages <- c("aod", "psych", "ggplot2", "tidyr", "stringr", "lubridate", "readxl","knitr",
"readr", "rmarkdown", "png", "lme4", "ez", "multcomp","zoo", "dplyr", "tidyr", "broom")
#Install required_packages:
new.packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#Load required_packages:
lapply(required_packages, require, character.only = TRUE)
#Set decimal points and disable scientific notation
options(digits=3, scipen=999)
###### Import single trial data:
data <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/master_matrix_R_Neglect.csv", header=FALSE)
#Save a column called ID_num to use to merge with data_Stim_locked_ERP below
data$ID_num<-data$V1
#Import IDs:
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/ID_vector_Neglect.csv", quote="\"")
data$ID<-data[,1]
#Replace the participant numbers with IDs:
data[,1]<-ID[,1]
#Remove the seperate ID vector now it has been included into data dataframe
rm(ID)
drops <- c("ID")
data<-data[,!(names(data) %in% drops)]
###### Import data_ParticipantLevel:
participant_level <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/participant_level_matrix_Neglect.csv", header=FALSE)
#Import IDs:
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/IDs_Neglect.csv", quote="\"")
ID <- ID %>% dplyr::rename(ID = V1)
participant_level$ID<-ID$ID
rm(ID)
# drops <- c("ID")
# participant_level<-participant_level[,!(names(participant_level) %in% drops)]
#Rename data columns:
data<- data %>% #Rename data columns:
rename(.,
ID=V1,
ResponseMapping=V2,
TotalTrialNumber=V3,
Trial=V4,
ITI=V5,
Hemifield=V6,
MotionDirection=V7,
RespLR=V8,
Accuracy=V9,
FixationBreak=V10,
Art_neg500_0=V11,
Art_neg100_100PR=V12,
RejectedTrial=V13,
Threshold_cohLevel=V14,
RT=V15,
PreAlphaPower=V16,
PreAlphaPowerLH=V17,
PreAlphaPowerRH=V18,
PreAlphaAsym=V19,
PrePupilDiameter=V20,
NumRepeatedTrials=V21,
Group=V22) %>% #next make the required columns into factors:
mutate_each_(funs(factor), c("Group", "ITI", "Hemifield", "Accuracy")) %>% #next re-class required vectors into Logicals:
mutate_at(vars(starts_with("Art_")), funs(as.logical)) %>%
mutate_at(vars(starts_with("Fixation")), funs(as.logical)) %>%
mutate_at(vars(starts_with("RejectedTrial")), funs(as.logical)) %>%#next Rename factor Levels:
mutate(Hemifield = ifelse(Hemifield==1, "Left", "Right"),
Accuracy= ifelse(Accuracy==1, "Hit", "Miss"),
Group = ifelse(Group==1, "Neglect", "Control")) #%>% filter(ID=="HN003" |ID=="HN021" |ID=="HN020")
###############Data Cleaning For Single Trial Data######################
#Check number of Trials for each participant by running the function 'length',
#on "data$RT" for each group, broken down by ID + Light
num_trials1 <- data %>% group_by(ID) %>% summarise( Trials = length(RT))
summary(num_trials1$Trials)
##################Accuracy ##########################
Accuracy_checker <- data %>%
group_by(ID, Hemifield) %>%
summarise(Hits  = sum(Accuracy=="Hit"),
Misses = sum(Accuracy=="Miss" | Accuracy=="WrongButton")) %>%
mutate(Total=Hits+Misses,
Accuracy_overall= (Hits/Total)*100)
summary(Accuracy_checker$Accuracy_overall)
#Remove RejectedTrial (with eeg trigger conflicts)
#trials where RT longer than 1500ms (i.e. after target finished)
#or RT faster than 150ms (i.e. too fast must be false alarm)
data<-filter(data, RT<1500, RT>150, !-RejectedTrial)
############################################ Log transform:
################################################################
data$log_RT<-log(data$RT) #log
#####Z-score each participant's log_RT data ####
data$IDbyITIbyHemifield<-interaction(data$ID, data$ITI, data$Hemifield)
#calculate mean and sd
m <- tapply(data$log_RT,data$IDbyITIbyHemifield,mean, na.rm = T)
s <- tapply(data$log_RT,data$IDbyITIbyHemifield,sd, na.rm = T)
#calculate log_RT.Z and save it inside data.frame
data$log_RT.Z <- (data$log_RT-m[data$IDbyITIbyHemifield])/s[data$IDbyITIbyHemifield]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,] #this is for individual trial
#plot again after outlier removal:
ggplot(data, aes(RT))  +
geom_histogram(aes(y=..count..), colour="black", fill="white") +
facet_wrap(~ Group)
ggplot(data, aes(log_RT))  +
geom_histogram(aes(y=..count..), colour="black", fill="white") +
facet_wrap(~ Group)
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#Rename participant_level columns of participant_level:
participant_level<- participant_level %>% #Rename data columns:
rename(.,
ValidPreAlphaTrials=V1,
ValidERPTrials=V2,
PreAlpha_LeftHemi=V3,
PreAlpha_RightHemi=V4,
N2c_LeftTarget=V5,
N2c_RightTarget=V6,
N2i_LeftTarget=V7,
N2i_RightTarget=V8,
AlphaDesync_LeftHemi_LeftTarget=V9,
AlphaDesync_LeftHemi_RightTarget=V10,
AlphaDesync_RightHemi_LeftTarget=V11,
AlphaDesync_RightHemi_RightTarget=V12,
CPPonset_LeftTarget=V13,
CPPonset_RightTarget=V14,
N2c_latency_LeftTarget=V15,
N2c_latency_RightTarget=V16,
N2i_latency_LeftTarget=V17,
N2i_latency_RightTarget=V18,
CPPslope_LeftTarget=V19,
CPPslope_RightTarget=V20,
Group=V21) %>% ##next calculate the ERP asymmetry measures:
mutate(.,
N2c_Asym = (N2c_LeftTarget-N2c_RightTarget)/(N2c_LeftTarget+N2c_RightTarget),
N2i_Asym = (N2i_LeftTarget-N2i_RightTarget)/(N2i_LeftTarget+N2i_RightTarget),
N2c_latency_Asym = (N2c_latency_LeftTarget-N2c_latency_RightTarget)/(N2c_latency_LeftTarget+N2c_latency_RightTarget),
N2i_latency_Asym =(N2i_latency_LeftTarget-N2i_latency_RightTarget)/(N2i_latency_LeftTarget+N2i_latency_RightTarget),
CPPonset_Asym = (CPPonset_LeftTarget-CPPonset_RightTarget)/(CPPonset_LeftTarget+CPPonset_RightTarget),
CPPslope_Asym = (CPPslope_LeftTarget-CPPslope_RightTarget)/(CPPslope_LeftTarget+CPPslope_RightTarget),
Group = ifelse(Group==1, "Neglect", "Control")
)  #%>% filter(ID=="HN003" |ID=="HN021" |ID=="HN020")
#Look at Column names:
colnames(participant_level)
#Make the required columns into factors:
# participant_level$Group <- factor(participant_level$Group)
#Collapse each participant's RT single trials to participant level
RT_collapsed<- data %>%
group_by(ID, Hemifield) %>%
summarise(RT=mean(RT)) %>% #next bring Target-Hemifield up into wide format:
na.omit() %>%
spread(Hemifield, RT) %>% #next rename
rename(RT_Left=Left, RT_Right=Right) %>% # next Calculate RT asymmetry:
mutate(RT_Asym=(RT_Left-RT_Right)/(RT_Left+RT_Right))
#Merge it in with the ERP measures
participant_level<-merge(participant_level, RT_collapsed, by.x = "ID", by.y = "ID")
############## Participant exclusion ####################
#Single trial
# data <-data[data$ID %in% participant_level$ID, ]
#This ^ Excludes participants from the single trial data if they are not in participant_level
#Calculate the number of trials each participant has left after fixation break trials are kicked out:
data <- na.omit(data)
num_trials2 <- data %>% group_by(ID) %>% summarise(Trials = length(RT))
summary(num_trials2$Trials)
#Merge this into the single trial and participant level data sets
data <- merge(data, num_trials2, by.x = "ID", by.y = "ID")
participant_level <-merge(participant_level, num_trials2, by.x = "ID", by.y = "ID")
ggplot(data, aes(Hemifield, RT, colour = Hemifield))  +
geom_violin()  +
theme_bw () +
geom_boxplot(alpha=0.5) +
geom_point() +
facet_wrap(~ID)
ggsave("RT from individual right hemi patients.png")
##Kick out HN875 who is an RT outlier (very slow RTs); HN975 has an invalid right target CPP onset
# participant_level<-filter(participant_level, ID!="HN004", ID!="HN021")
# data<-filter(data, ID!="HN004", ID!="HN021")
View(data)
View(data)
View(participant_level)
####Which computer/directory is this being run on?
setwd(("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_R"))
### Install/load required packages
#List of R packages required for this analysis:
required_packages <- c("aod", "psych", "ggplot2", "tidyr", "stringr", "lubridate", "readxl","knitr",
"readr", "rmarkdown", "png", "lme4", "ez", "multcomp","zoo", "dplyr", "tidyr", "broom")
#Install required_packages:
new.packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#Load required_packages:
lapply(required_packages, require, character.only = TRUE)
#Set decimal points and disable scientific notation
options(digits=3, scipen=999)
###### Import single trial data:
data <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/master_matrix_R_Neglect.csv", header=FALSE)
#Save a column called ID_num to use to merge with data_Stim_locked_ERP below
data$ID_num<-data$V1
#Import IDs:
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/ID_vector_Neglect.csv", quote="\"")
data$ID<-data[,1]
#Replace the participant numbers with IDs:
data[,1]<-ID[,1]
#Remove the seperate ID vector now it has been included into data dataframe
rm(ID)
drops <- c("ID")
data<-data[,!(names(data) %in% drops)]
###### Import data_ParticipantLevel:
participant_level <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/participant_level_matrix_Neglect.csv", header=FALSE)
#Import IDs:
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/IDs_Neglect.csv", quote="\"")
ID <- ID %>% dplyr::rename(ID = V1)
participant_level$ID<-ID$ID
rm(ID)
# drops <- c("ID")
# participant_level<-participant_level[,!(names(participant_level) %in% drops)]
#Rename data columns:
data<- data %>% #Rename data columns:
rename(.,
ID=V1,
ResponseMapping=V2,
TotalTrialNumber=V3,
Trial=V4,
ITI=V5,
Hemifield=V6,
MotionDirection=V7,
RespLR=V8,
Accuracy=V9,
FixationBreak=V10,
Art_neg500_0=V11,
Art_neg100_100PR=V12,
RejectedTrial=V13,
Threshold_cohLevel=V14,
RT=V15,
PreAlphaPower=V16,
PreAlphaPowerLH=V17,
PreAlphaPowerRH=V18,
PreAlphaAsym=V19,
PrePupilDiameter=V20,
NumRepeatedTrials=V21,
Group=V22) %>% #next make the required columns into factors:
mutate_each_(funs(factor), c("Group", "ITI", "Hemifield", "Accuracy")) %>% #next re-class required vectors into Logicals:
mutate_at(vars(starts_with("Art_")), funs(as.logical)) %>%
mutate_at(vars(starts_with("Fixation")), funs(as.logical)) %>%
mutate_at(vars(starts_with("RejectedTrial")), funs(as.logical)) %>%#next Rename factor Levels:
mutate(Hemifield = ifelse(Hemifield==1, "Left", "Right"),
Accuracy= ifelse(Accuracy==1, "Hit", "Miss"),
Group = ifelse(Group==1, "Neglect", "Control")) #%>% filter(ID=="HN003" |ID=="HN021" |ID=="HN020")
###############Data Cleaning For Single Trial Data######################
#Check number of Trials for each participant by running the function 'length',
#on "data$RT" for each group, broken down by ID + Light
num_trials1 <- data %>% group_by(ID) %>% summarise( Trials = length(RT))
summary(num_trials1$Trials)
##################Accuracy ##########################
Accuracy_checker <- data %>%
group_by(ID, Hemifield) %>%
summarise(Hits  = sum(Accuracy=="Hit"),
Misses = sum(Accuracy=="Miss" | Accuracy=="WrongButton")) %>%
mutate(Total=Hits+Misses,
Accuracy_overall= (Hits/Total)*100)
summary(Accuracy_checker$Accuracy_overall)
#Remove RejectedTrial (with eeg trigger conflicts)
#trials where RT longer than 1500ms (i.e. after target finished)
#or RT faster than 150ms (i.e. too fast must be false alarm)
data<-filter(data, RT<1500, RT>150, !-RejectedTrial)
############################################ Log transform:
################################################################
data$log_RT<-log(data$RT) #log
#####Z-score each participant's log_RT data ####
data$IDbyITIbyHemifield<-interaction(data$ID, data$ITI, data$Hemifield)
#calculate mean and sd
m <- tapply(data$log_RT,data$IDbyITIbyHemifield,mean, na.rm = T)
s <- tapply(data$log_RT,data$IDbyITIbyHemifield,sd, na.rm = T)
#calculate log_RT.Z and save it inside data.frame
data$log_RT.Z <- (data$log_RT-m[data$IDbyITIbyHemifield])/s[data$IDbyITIbyHemifield]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,] #this is for individual trial
#plot again after outlier removal:
ggplot(data, aes(RT))  +
geom_histogram(aes(y=..count..), colour="black", fill="white") +
facet_wrap(~ Group)
ggplot(data, aes(log_RT))  +
geom_histogram(aes(y=..count..), colour="black", fill="white") +
facet_wrap(~ Group)
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#Rename participant_level columns of participant_level:
participant_level<- participant_level %>% #Rename data columns:
rename(.,
ValidPreAlphaTrials=V1,
ValidERPTrials=V2,
PreAlpha_LeftHemi=V3,
PreAlpha_RightHemi=V4,
N2c_LeftTarget=V5,
N2c_RightTarget=V6,
N2i_LeftTarget=V7,
N2i_RightTarget=V8,
AlphaDesync_LeftHemi_LeftTarget=V9,
AlphaDesync_LeftHemi_RightTarget=V10,
AlphaDesync_RightHemi_LeftTarget=V11,
AlphaDesync_RightHemi_RightTarget=V12,
CPPonset_LeftTarget=V13,
CPPonset_RightTarget=V14,
N2c_latency_LeftTarget=V15,
N2c_latency_RightTarget=V16,
N2i_latency_LeftTarget=V17,
N2i_latency_RightTarget=V18,
CPPslope_LeftTarget=V19,
CPPslope_RightTarget=V20,
Group=V21) %>% ##next calculate the ERP asymmetry measures:
mutate(.,
N2c_Asym = (N2c_LeftTarget-N2c_RightTarget)/(N2c_LeftTarget+N2c_RightTarget),
N2i_Asym = (N2i_LeftTarget-N2i_RightTarget)/(N2i_LeftTarget+N2i_RightTarget),
N2c_latency_Asym = (N2c_latency_LeftTarget-N2c_latency_RightTarget)/(N2c_latency_LeftTarget+N2c_latency_RightTarget),
N2i_latency_Asym =(N2i_latency_LeftTarget-N2i_latency_RightTarget)/(N2i_latency_LeftTarget+N2i_latency_RightTarget),
CPPonset_Asym = (CPPonset_LeftTarget-CPPonset_RightTarget)/(CPPonset_LeftTarget+CPPonset_RightTarget),
CPPslope_Asym = (CPPslope_LeftTarget-CPPslope_RightTarget)/(CPPslope_LeftTarget+CPPslope_RightTarget),
Group = ifelse(Group==1, "Neglect", "Control")
)  #%>% filter(ID=="HN003" |ID=="HN021" |ID=="HN020")
#Look at Column names:
colnames(participant_level)
#Collapse each participant's RT single trials to participant level
RT_collapsed<- data %>%
group_by(ID, Hemifield) %>%
summarise(RT=mean(RT)) %>% #next bring Target-Hemifield up into wide format:
na.omit() %>%
spread(Hemifield, RT) %>% #next rename
rename(RT_Left=Left, RT_Right=Right) %>% # next Calculate RT asymmetry:
mutate(RT_Asym=(RT_Left-RT_Right)/(RT_Left+RT_Right))
#Merge it in with the ERP measures
participant_level<-merge(participant_level, RT_collapsed, by.x = "ID", by.y = "ID")
setwd(("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_R"))
### Install/load required packages
#List of R packages required for this analysis:
required_packages <- c("aod", "psych", "ggplot2", "tidyr", "stringr", "lubridate", "readxl","knitr",
"readr", "rmarkdown", "png", "lme4", "ez", "multcomp","zoo", "dplyr", "tidyr", "broom")
#Install required_packages:
new.packages <- required_packages[!(required_packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
#Load required_packages:
lapply(required_packages, require, character.only = TRUE)
#Set decimal points and disable scientific notation
options(digits=3, scipen=999)
###### Import single trial data:
data <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/master_matrix_R_Neglect.csv", header=FALSE)
#Save a column called ID_num to use to merge with data_Stim_locked_ERP below
data$ID_num<-data$V1
#Import IDs:
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/ID_vector_Neglect.csv", quote="\"")
data$ID<-data[,1]
#Replace the participant numbers with IDs:
data[,1]<-ID[,1]
#Remove the seperate ID vector now it has been included into data dataframe
rm(ID)
drops <- c("ID")
data<-data[,!(names(data) %in% drops)]
###### Import data_ParticipantLevel:
participant_level <- read.csv("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/participant_level_matrix_Neglect.csv", header=FALSE)
#Import IDs:
ID <- read.table("S:/R-MNHS-SPP/Bellgrove-data/11.Megan_ONeill/Analysis Scripts_Matlab/IDs_Neglect.csv", quote="\"")
ID <- ID %>% dplyr::rename(ID = V1)
participant_level$ID<-ID$ID
rm(ID)
# drops <- c("ID")
# participant_level<-participant_level[,!(names(participant_level) %in% drops)]
#Rename data columns:
data<- data %>% #Rename data columns:
rename(.,
ID=V1,
ResponseMapping=V2,
TotalTrialNumber=V3,
Trial=V4,
ITI=V5,
Hemifield=V6,
MotionDirection=V7,
RespLR=V8,
Accuracy=V9,
FixationBreak=V10,
Art_neg500_0=V11,
Art_neg100_100PR=V12,
RejectedTrial=V13,
Threshold_cohLevel=V14,
RT=V15,
PreAlphaPower=V16,
PreAlphaPowerLH=V17,
PreAlphaPowerRH=V18,
PreAlphaAsym=V19,
PrePupilDiameter=V20,
NumRepeatedTrials=V21,
Group=V22) %>% #next make the required columns into factors:
mutate_each_(funs(factor), c("Group", "ITI", "Hemifield", "Accuracy")) %>% #next re-class required vectors into Logicals:
mutate_at(vars(starts_with("Art_")), funs(as.logical)) %>%
mutate_at(vars(starts_with("Fixation")), funs(as.logical)) %>%
mutate_at(vars(starts_with("RejectedTrial")), funs(as.logical)) %>%#next Rename factor Levels:
mutate(Hemifield = ifelse(Hemifield==1, "Left", "Right"),
Accuracy= ifelse(Accuracy==1, "Hit", "Miss"),
Group = ifelse(Group==1, "Neglect", "Control")) #%>% filter(ID=="HN003" |ID=="HN021" |ID=="HN020")
###############Data Cleaning For Single Trial Data######################
#Check number of Trials for each participant by running the function 'length',
#on "data$RT" for each group, broken down by ID + Light
num_trials1 <- data %>% group_by(ID) %>% summarise( Trials = length(RT))
summary(num_trials1$Trials)
##################Accuracy ##########################
Accuracy_checker <- data %>%
group_by(ID, Hemifield) %>%
summarise(Hits  = sum(Accuracy=="Hit"),
Misses = sum(Accuracy=="Miss" | Accuracy=="WrongButton")) %>%
mutate(Total=Hits+Misses,
Accuracy_overall= (Hits/Total)*100)
summary(Accuracy_checker$Accuracy_overall)
#Remove RejectedTrial (with eeg trigger conflicts)
#trials where RT longer than 1500ms (i.e. after target finished)
#or RT faster than 150ms (i.e. too fast must be false alarm)
data<-filter(data, RT<1500, RT>150, !-RejectedTrial)
############################################ Log transform:
################################################################
data$log_RT<-log(data$RT) #log
#####Z-score each participant's log_RT data ####
data$IDbyITIbyHemifield<-interaction(data$ID, data$ITI, data$Hemifield)
#calculate mean and sd
m <- tapply(data$log_RT,data$IDbyITIbyHemifield,mean, na.rm = T)
s <- tapply(data$log_RT,data$IDbyITIbyHemifield,sd, na.rm = T)
#calculate log_RT.Z and save it inside data.frame
data$log_RT.Z <- (data$log_RT-m[data$IDbyITIbyHemifield])/s[data$IDbyITIbyHemifield]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,]
#Remove trials where absolute log_RT.Z>3 (i.e. remove outlier RTs)
data<-data[!abs(data$log_RT.Z)>3,] #this is for individual trial
#plot again after outlier removal:
ggplot(data, aes(RT))  +
geom_histogram(aes(y=..count..), colour="black", fill="white") +
facet_wrap(~ Group)
ggplot(data, aes(log_RT))  +
geom_histogram(aes(y=..count..), colour="black", fill="white") +
facet_wrap(~ Group)
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#################################################################################################################################
#Rename participant_level columns of participant_level:
participant_level<- participant_level %>% #Rename data columns:
rename(.,
ValidPreAlphaTrials=V1,
ValidERPTrials=V2,
PreAlpha_LeftHemi=V3,
PreAlpha_RightHemi=V4,
N2c_LeftTarget=V5,
N2c_RightTarget=V6,
N2i_LeftTarget=V7,
N2i_RightTarget=V8,
AlphaDesync_LeftHemi_LeftTarget=V9,
AlphaDesync_LeftHemi_RightTarget=V10,
AlphaDesync_RightHemi_LeftTarget=V11,
AlphaDesync_RightHemi_RightTarget=V12,
CPPonset_LeftTarget=V13,
CPPonset_RightTarget=V14,
N2c_latency_LeftTarget=V15,
N2c_latency_RightTarget=V16,
N2i_latency_LeftTarget=V17,
N2i_latency_RightTarget=V18,
CPPslope_LeftTarget=V19,
CPPslope_RightTarget=V20,
Group=V21) %>% ##next calculate the ERP asymmetry measures:
mutate(.,
N2c_Asym = (N2c_LeftTarget-N2c_RightTarget)/(N2c_LeftTarget+N2c_RightTarget),
N2i_Asym = (N2i_LeftTarget-N2i_RightTarget)/(N2i_LeftTarget+N2i_RightTarget),
N2c_latency_Asym = (N2c_latency_LeftTarget-N2c_latency_RightTarget)/(N2c_latency_LeftTarget+N2c_latency_RightTarget),
N2i_latency_Asym =(N2i_latency_LeftTarget-N2i_latency_RightTarget)/(N2i_latency_LeftTarget+N2i_latency_RightTarget),
CPPonset_Asym = (CPPonset_LeftTarget-CPPonset_RightTarget)/(CPPonset_LeftTarget+CPPonset_RightTarget),
CPPslope_Asym = (CPPslope_LeftTarget-CPPslope_RightTarget)/(CPPslope_LeftTarget+CPPslope_RightTarget),
Group = ifelse(Group==1, "Neglect", "Control")
)  #%>% filter(ID=="HN003" |ID=="HN021" |ID=="HN020")
#Look at Column names:
colnames(participant_level)
#Make the required columns into factors:
# participant_level$Group <- factor(participant_level$Group)
#Collapse each participant's RT single trials to participant level
RT_collapsed<- data %>%
group_by(ID, Hemifield) %>%
summarise(RT=mean(RT)) %>% #next bring Target-Hemifield up into wide format:
na.omit() %>%
spread(Hemifield, RT) %>% #next rename
rename(RT_Left=Left, RT_Right=Right) %>% # next Calculate RT asymmetry:
mutate(RT_Asym=(RT_Left-RT_Right)/(RT_Left+RT_Right))
participant_level<-merge(participant_level, RT_collapsed, by.x = "ID", by.y = "ID")
RT_collapsed<- data %>%
group_by(ID, Hemifield) %>%
summarise(RT=mean(RT))
View(data)
